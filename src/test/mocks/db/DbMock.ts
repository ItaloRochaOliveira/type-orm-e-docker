import { DataSource, EntityManager, EntityTarget, QueryRunner, Repository, TreeRepository } from "typeorm";
import { PlainObjectToNewEntityTransformer } from "typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer";
import * as sinon from 'sinon';

export default class DbMock extends EntityManager{
    "@instanceof": symbol;
    connection: DataSource;
    queryRunner?: QueryRunner | undefined;
    protected repositories: Map<EntityTarget<any>, Repository<any>>;
    protected treeRepositories: TreeRepository<any>[];
    protected plainObjectToEntityTransformer: PlainObjectToNewEntityTransformer;
    transaction: sinon.SinonStub;
    query: sinon.SinonStub;
    createQueryBuilder: sinon.SinonStub;
    hasId: sinon.SinonStub;
    getId: sinon.SinonStub;
    create: sinon.SinonStub;
    merge: sinon.SinonStub;
    preload: sinon.SinonStub;
    save: sinon.SinonStub;
    remove: sinon.SinonStub;
    softRemove: sinon.SinonStub;
    recover: sinon.SinonStub;
    insert: sinon.SinonStub;
    upsert: sinon.SinonStub;
    update: sinon.SinonStub;
    delete: sinon.SinonStub;
    softDelete: sinon.SinonStub;
    restore: sinon.SinonStub;
    exists: sinon.SinonStub;
    existsBy: sinon.SinonStub;
    count: sinon.SinonStub;
    countBy: sinon.SinonStub;
    sum: sinon.SinonStub;
    average: sinon.SinonStub;
    minimum: sinon.SinonStub;
    maximum: sinon.SinonStub;
    find: sinon.SinonStub;
    findBy: sinon.SinonStub;
    findAndCount: sinon.SinonStub;
    findAndCountBy: sinon.SinonStub;
    findByIds: sinon.SinonStub;
    findOne: sinon.SinonStub;
    findOneBy: sinon.SinonStub;
    findOneById: sinon.SinonStub;
    findOneOrFail: sinon.SinonStub;
    findOneByOrFail: sinon.SinonStub;
    clear: sinon.SinonStub;
    increment: sinon.SinonStub;
    decrement: sinon.SinonStub;
    getRepository: sinon.SinonStub;
    getTreeRepository: sinon.SinonStub;
    getMongoRepository: sinon.SinonStub;
    withRepository: sinon.SinonStub;
    getCustomRepository: sinon.SinonStub;
    release: sinon.SinonStub;

    constructor() {
        super(sinon.createStubInstance(DataSource));
        this.transaction = sinon.stub();
        this.query = sinon.stub();
        this.createQueryBuilder = sinon.stub();
        this.hasId = sinon.stub();
        this.getId = sinon.stub();
        this.create = sinon.stub();
        this.merge = sinon.stub();
        this.preload = sinon.stub();
        this.save = sinon.stub();
        this.remove = sinon.stub();
        this.softRemove = sinon.stub();
        this.recover = sinon.stub();
        this.insert = sinon.stub();
        this.upsert = sinon.stub();
        this.update = sinon.stub();
        this.delete = sinon.stub();
        this.softDelete = sinon.stub();
        this.restore = sinon.stub();
        this.exists = sinon.stub();
        this.existsBy = sinon.stub();
        this.count = sinon.stub();
        this.countBy = sinon.stub();
        this.sum = sinon.stub();
        this.average = sinon.stub();
        this.minimum = sinon.stub();
        this.maximum = sinon.stub();
        this.find = sinon.stub();
        this.findBy = sinon.stub();
        this.findAndCount = sinon.stub();
        this.findAndCountBy = sinon.stub();
        this.findByIds = sinon.stub();
        this.findOne = sinon.stub();
        this.findOneBy = sinon.stub();
        this.findOneById = sinon.stub();
        this.findOneOrFail = sinon.stub();
        this.findOneByOrFail = sinon.stub();
        this.clear = sinon.stub();
        this.increment = sinon.stub();
        this.decrement = sinon.stub();
        this.getRepository = sinon.stub();
        this.getTreeRepository = sinon.stub();
        this.getMongoRepository = sinon.stub();
        this.withRepository = sinon.stub();
        this.getCustomRepository = sinon.stub();
        this.release = sinon.stub();
        (this as any).callAggregateFun = sinon.stub();

    }

}